from logging import Logger
from logging import getLogger
from typing import List
from typing import NewType
from typing import cast

from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from arcade import key as arcadeKey

from pytrek.commandparser.CommandExtractor import CommandType
from pytrek.commandparser.CommandExtractor import ParsedCommand
from pytrek.commandparser.CommandExtractor import CommandExtractor

KeyStrokes = NewType('KeyStrokes', List[int])


class TestCommandExtractor(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 27 July 2024
    """
    clsLogger: Logger

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        TestCommandExtractor.clsLogger = getLogger(__name__)

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testRestCommand(self):
        pressedKeys: KeyStrokes = KeyStrokes([
            arcadeKey.R, arcadeKey.E, arcadeKey.S, arcadeKey.T, arcadeKey.SPACE, arcadeKey.NUM_6, arcadeKey.RETURN
        ])

        parseCommand: ParsedCommand = self._simulateKeyStrokes(keyStrokes=pressedKeys)

        self.assertEqual(CommandType.Rest, parseCommand.commandType, 'Invalid command')
        self.assertEqual(6, parseCommand.restInterval, 'Invalid interval')

    def testPhasersCommand(self):
        keyStrokes: KeyStrokes = KeyStrokes([
            arcadeKey.P, arcadeKey.H, arcadeKey.A, arcadeKey.S, arcadeKey.E, arcadeKey.R, arcadeKey.S, arcadeKey.SPACE,
            arcadeKey.NUM_2, arcadeKey.NUM_5, arcadeKey.NUM_0,
            arcadeKey.RETURN
        ])

        parseCommand: ParsedCommand = self._simulateKeyStrokes(keyStrokes=keyStrokes)

        self.assertEqual(CommandType.Phasers, parseCommand.commandType, 'Invalid command')
        self.assertEqual(250, parseCommand.phaserAmountToFire, 'Invalid phaser power')

    def testPhotonsCommand(self):

        keyStrokes: KeyStrokes = KeyStrokes([
            arcadeKey.P, arcadeKey.H, arcadeKey.O, arcadeKey.T, arcadeKey.O, arcadeKey.N, arcadeKey.S, arcadeKey.SPACE,
            arcadeKey.NUM_3,
            arcadeKey.RETURN,
        ])

        parseCommand: ParsedCommand = self._simulateKeyStrokes(keyStrokes=keyStrokes)

        self.assertEqual(CommandType.Photons, parseCommand.commandType, 'Invalid photon command')
        self.assertEqual(3, parseCommand.numberOfPhotonTorpedoesToFire, 'Invalid photon count')

    def testWarpCommand(self):

        keyStrokes: KeyStrokes = KeyStrokes([
            arcadeKey.W, arcadeKey.A, arcadeKey.R, arcadeKey.P, arcadeKey.SPACE,
            arcadeKey.NUM_3,
            arcadeKey.RETURN,
        ])

        parseCommand: ParsedCommand = self._simulateKeyStrokes(keyStrokes=keyStrokes)

        self.assertEqual(CommandType.Warp, parseCommand.commandType, 'Should be a warp command')

    def testInvalidCommand(self):
        pressedKeys: KeyStrokes = KeyStrokes([
            arcadeKey.R, arcadeKey.E, arcadeKey.S, arcadeKey.T, arcadeKey.SPACE, arcadeKey.RETURN
        ])
        parseCommand: ParsedCommand = self._simulateKeyStrokes(keyStrokes=pressedKeys)

        self.assertEqual(CommandType.InvalidCommand, parseCommand.commandType, 'Should be invalid')

    def _simulateKeyStrokes(self, keyStrokes: KeyStrokes) -> ParsedCommand:

        extractor: CommandExtractor = CommandExtractor()

        parsedCommand: ParsedCommand = cast(ParsedCommand, None)
        for key in keyStrokes:
            parsedCommand = extractor.processKeyPress(key)
            if parsedCommand.commandType != CommandType.NoCommand:
                break

        return parsedCommand


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestCommandExtractor))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
