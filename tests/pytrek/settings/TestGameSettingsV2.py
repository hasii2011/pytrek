
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from pytrek.model.Coordinates import Coordinates
from pytrek.settings.GameSettingsV2 import GameSettingsV2
from pytrek.settings.TorpedoSpeeds import TorpedoSpeeds


class TestGameSettingsV2(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 10 July 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testInitialCreation(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()

        self.assertIsNotNone(gameSettings, 'Was not created')

    def testPower(self):

        gameSettings: GameSettingsV2 = GameSettingsV2()

        self.assertEqual(5000, gameSettings.initialEnergyLevel,              'Initial Energy default must have changed')
        self.assertEqual(2.0,  gameSettings.phaserFactor,                    'Should be a float')

    def testFactors(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()
        self.assertEqual(2.0,  gameSettings.starBaseExtender,                'Bad star base extender')
        self.assertEqual(15,   gameSettings.maxKlingonFiringInterval,        'Bad interval')
        self.assertEqual(10,   gameSettings.maxCommanderFiringInterval,      'Bad max commander firing interval')
        self.assertEqual(8,    gameSettings.maxSuperCommanderFiringInterval, 'Bad max commander firing interval')
        self.assertEqual(5,    gameSettings.minKlingonMoveInterval,          'Bad min Klingon move interval')
        self.assertEqual(3,    gameSettings.minCommanderMoveInterval,        'Bad min Commander move interval')
        self.assertEqual(0.2,  gameSettings.photonTorpedoMisfireRate,        'Bad misfire rate')

    def testGetDeveloper(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()

        self.assertEqual(128,  gameSettings.maxStarbaseSearches)
        self.assertEqual(128,   gameSettings.maxCommanderSearches)

    def testSetDeveloper(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()

        gameSettings.maxStarbaseSearches = 500
        self.assertEqual(500,  gameSettings.maxStarbaseSearches)
        gameSettings.maxStarbaseSearches = 128

    def testGetDebug(self):

        gameSettings: GameSettingsV2 = GameSettingsV2()

        self.assertFalse(gameSettings.manualPlaceShipInQuadrant, 'This should be off')
        self.assertEqual(Coordinates(0, 0), gameSettings.manualSectorCoordinates, 'These are wrong')
        self.assertFalse(gameSettings.addCommanders, 'This should be off')
        self.assertFalse(gameSettings.addKlingons, 'This should be off')
        self.assertFalse(gameSettings.addPlanet,   'No extra planets')
        self.assertFalse(gameSettings.debugBaseEnemyTorpedo,   'No extra planets')

    def testSetDebug(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()
        gameSettings.manualSectorCoordinates = Coordinates(3, 3)
        self.assertEqual(Coordinates(3, 3), gameSettings.manualSectorCoordinates, 'Debug Setting Manual Coordinates is wrong')
        gameSettings.manualSectorCoordinates = Coordinates(0, 0)

    def testSetDebug2(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()
        gameSettings.commanderCount = 99
        self.assertEqual(99, gameSettings.commanderCount, 'Commander count is not correct')
        gameSettings.commanderCount = 1

    def testSetDebug5(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()
        gameSettings.debugBaseEnemyTorpedoInterval = 6666
        self.assertEqual(6666, gameSettings.debugBaseEnemyTorpedoInterval, 'Temporarily evil')
        gameSettings.debugBaseEnemyTorpedoInterval = 20

    def testSetDebug3(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()
        gameSettings.addPlanet = True
        self.assertTrue(gameSettings.addPlanet, 'Temporarily True')
        gameSettings.addPlanet = False

    def testSetDebug4(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()
        gameSettings.debugBaseEnemyTorpedo = True
        self.assertTrue(gameSettings.debugBaseEnemyTorpedo, 'Temporarily True')
        gameSettings.debugBaseEnemyTorpedo = False

    def testGetNoviceTorpedoSpeed(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()

        expectedTS: TorpedoSpeeds = TorpedoSpeeds.toTorpedoSpeed('5,2,2,1')
        actualTS:   TorpedoSpeeds = gameSettings.noviceTorpedoSpeeds

        self.assertEqual(expectedTS, actualTS, 'Torpedo speeds do not match')

    def testGetEmeritusTorpedoSpeed(self):
        gameSettings: GameSettingsV2 = GameSettingsV2()

        expectedTS: TorpedoSpeeds = TorpedoSpeeds.toTorpedoSpeed('1,2,5,5')
        actualTS:   TorpedoSpeeds = gameSettings.emeritusTorpedoSpeeds

        self.assertEqual(expectedTS, actualTS, 'Torpedo speeds do not match')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestGameSettingsV2))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
